import streamlit as st
import plotly.express as px
import plotly.graph_objects as go  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
import numpy as np
import pandas as pd
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç–µ–º—ã
st.set_page_config(
    page_title="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å–∫–ª–∞–¥–∞",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å–∫–ª–∞–¥–∞\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–∫–ª–∞–¥–∞."
    }
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Streamlit
st.write(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è Streamlit: {st.__version__}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª—è–º–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
if 'shares' not in st.session_state:
    st.session_state.shares = {
        'storage_share': 0.5,
        'loan_share': 0.3,
        'vip_share': 0.1,
        'short_term_share': 0.1
    }

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –¥–æ–ª–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
storage_type_mapping = {
    'storage_share': '–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
    'loan_share': '–•—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–π–º–∞–º–∏',
    'vip_share': 'VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
    'short_term_share': '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ'
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def validate_inputs(params: dict) -> bool:
    errors = []
    if params["total_area"] <= 0:
        errors.append("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å–∫–ª–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
    if params["rental_cost_per_m2"] <= 0:
        errors.append("–ê—Ä–µ–Ω–¥–∞ –∑–∞ 1 –º¬≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
    if params["loan_interest_rate"] < 0:
        errors.append("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –∑–∞–π–º–∞–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    if params["storage_fee"] < 0:
        errors.append("–¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
    if not (0 <= params["useful_area_ratio"] <= 1):
        errors.append("–î–æ–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0% –∏ 100%.")
    for share_key, share_value in [
        ("storage_share", params["storage_share"]),
        ("loan_share", params["loan_share"]),
        ("vip_share", params["vip_share"]),
        ("short_term_share", params["short_term_share"])
    ]:
        if not (0 <= share_value <= 1):
            errors.append(f"–î–æ–ª—è {storage_type_mapping.get(share_key, share_key.replace('_', ' ').capitalize())} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1.")
    total_shares = params["storage_share"] + params["loan_share"] + params["vip_share"] + params["short_term_share"]
    if total_shares > 1.0 + 1e-6:  # –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫ –¥–ª—è –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–∏
        errors.append("–°—É–º–º–∞ –¥–æ–ª–µ–π —Ç–∏–ø–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%.")
    if params["average_item_value"] < 0:
        errors.append("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    if params["salary_expense"] < 0:
        errors.append("–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    if params["miscellaneous_expenses"] < 0:
        errors.append("–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏.")
    if params["depreciation_expense"] < 0:
        errors.append("–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    if params["default_probability"] < 0 or params["default_probability"] > 1:
        errors.append("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0% –∏ 100%.")

    for error in errors:
        st.error(error)
    return len(errors) == 0

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
@st.cache_data
def calculate_additional_metrics(total_income: float, total_expenses: float, profit: float):
    profit_margin = (profit / total_income * 100) if total_income > 0 else 0
    profitability = (profit / total_expenses * 100) if total_expenses > 0 else 0
    return profit_margin, profitability

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def generate_download_link(df: pd.DataFrame, filename: str = "results.csv") -> None:
    csv = df.to_csv(index=False)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV",
        data=csv,
        file_name=filename,
        mime='text/csv'
    )

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–æ—â–∞–¥–µ–π
@st.cache_data
def calculate_areas(total_area: float, useful_area_ratio: float, shelves_per_m2: int,
                    storage_share: float, loan_share: float, vip_share: float, short_term_share: float) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥—è –∏–∑ –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    useful_area = total_area * useful_area_ratio
    double_shelf_area = useful_area * 2 * shelves_per_m2
    storage_area = double_shelf_area * storage_share
    loan_area = double_shelf_area * loan_share
    vip_area = double_shelf_area * vip_share
    short_term_area = double_shelf_area * short_term_share
    return {
        "storage_area": storage_area,
        "loan_area": loan_area,
        "vip_area": vip_area,
        "short_term_area": short_term_area
    }

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—â–µ–π
@st.cache_data
def calculate_items(storage_area: float, loan_area: float, vip_area: float, short_term_area: float,
                    storage_items_density: float, loan_items_density: float,
                    vip_items_density: float, short_term_items_density: float) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
    stored_items = storage_area * storage_items_density
    total_items_loan = loan_area * loan_items_density
    vip_stored_items = vip_area * vip_items_density
    short_term_stored_items = short_term_area * short_term_items_density
    return {
        "stored_items": stored_items,
        "total_items_loan": total_items_loan,
        "vip_stored_items": vip_stored_items,
        "short_term_stored_items": short_term_stored_items
    }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
@st.cache_data
def calculate_financials(
    storage_area: float,
    loan_area: float,
    vip_area: float,
    short_term_area: float,
    storage_items_density: float,
    loan_items_density: float,
    vip_items_density: float,
    short_term_items_density: float,
    storage_fee: float,
    item_evaluation: float,
    item_realization_markup: float,
    average_item_value: float,
    loan_interest_rate: float,
    realization_share_storage: float,
    realization_share_loan: float,
    realization_share_vip: float,
    realization_share_short_term: float,
    rental_cost_per_m2: float,
    total_area: float,
    salary_expense: float,
    miscellaneous_expenses: float,
    depreciation_expense: float,
    default_probability: float,  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞
    vip_extra_fee: float = 1000.0,
    short_term_daily_rate: float = 60.0
) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∫–ª–∞–¥–∞:
    - –û–±—â–∏–π –¥–æ—Ö–æ–¥ (—Å—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    - –ü—Ä–∏–±—ã–ª—å
    - –ò –¥—Ä.
    """
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π
    stored_items = storage_area * storage_items_density
    total_items_loan = loan_area * loan_items_density
    vip_stored_items = vip_area * vip_items_density
    short_term_stored_items = short_term_area * short_term_items_density

    # –î–æ—Ö–æ–¥—ã –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    storage_income = storage_area * storage_fee

    # –î–æ—Ö–æ–¥—ã –æ—Ç –∑–∞–π–º–æ–≤
    loan_interest_rate = max(loan_interest_rate, 0)  # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏
    loan_amount = loan_area * average_item_value * item_evaluation
    loan_income_month = loan_amount * (loan_interest_rate / 100) * 30

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    realization_items_storage = stored_items * realization_share_storage
    realization_items_loan = total_items_loan * realization_share_loan
    realization_items_vip = vip_stored_items * realization_share_vip
    realization_items_short_term = short_term_stored_items * realization_share_short_term  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

    realization_income_storage = realization_items_storage * average_item_value * (item_realization_markup / 100)
    realization_income_loan = realization_items_loan * average_item_value * (item_realization_markup / 100)
    realization_income_vip = realization_items_vip * average_item_value * (item_realization_markup / 100)
    realization_income_short_term = realization_items_short_term * average_item_value * (item_realization_markup / 100)

    realization_income = (realization_income_storage + realization_income_loan +
                          realization_income_vip + realization_income_short_term)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞ –∫ –∑–∞–π–º–∞–º
    loan_income_after_realization = loan_income_month * (1 - realization_share_loan) * (1 - default_probability)

    # VIP –¥–æ—Ö–æ–¥
    vip_income = vip_area * (storage_fee + vip_extra_fee)

    # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    short_term_income = short_term_area * short_term_daily_rate * 30

    # –û–±—â–∏–π –¥–æ—Ö–æ–¥
    total_income = (storage_income + loan_income_after_realization +
                    realization_income + vip_income + short_term_income)

    # –†–∞—Å—Ö–æ–¥—ã
    rental_expense = total_area * rental_cost_per_m2
    total_expenses = (rental_expense + salary_expense + miscellaneous_expenses + depreciation_expense)

    # –ü—Ä–∏–±—ã–ª—å
    profit = total_income - total_expenses
    daily_storage_fee = storage_fee / 30
    return {
        "total_income": total_income,
        "total_expenses": total_expenses,
        "profit": profit,
        "realization_income": realization_income,
        "storage_income": storage_income,
        "loan_income_after_realization": loan_income_after_realization,
        "vip_income": vip_income,
        "short_term_income": short_term_income,
        "rental_expense": rental_expense,
        "salary_expense": salary_expense,
        "miscellaneous_expenses": miscellaneous_expenses,
        "depreciation_expense": depreciation_expense,
        "loan_interest_rate": loan_interest_rate,
        "daily_storage_fee": daily_storage_fee
    }

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ BEP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
def calculate_bep(param_key, base_value, financials_func, **kwargs):
    """–†–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    financials_required_keys = [
        "storage_area",
        "loan_area",
        "vip_area",
        "short_term_area",
        "storage_items_density",
        "loan_items_density",
        "vip_items_density",
        "short_term_items_density",
        "storage_fee",
        "item_evaluation",
        "item_realization_markup",
        "average_item_value",
        "loan_interest_rate",
        "realization_share_storage",
        "realization_share_loan",
        "realization_share_vip",
        "realization_share_short_term",
        "rental_cost_per_m2",
        "total_area",
        "salary_expense",
        "miscellaneous_expenses",
        "depreciation_expense",
        "default_probability",
        "vip_extra_fee",
        "short_term_daily_rate"
    ]
    
    def profit_at_param(value):
        params = kwargs.copy()
        params[param_key] = value
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ calculate_financials
        relevant_params = {k: v for k, v in params.items() if k in financials_required_keys}
        recalc_financials = financials_func(**relevant_params)
        return recalc_financials["profit"]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü –ø–æ–∏—Å–∫–∞
    low_multiplier = 0.5
    high_multiplier = 1.5
    max_iterations = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    multiplier_step = 0.5  # –®–∞–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞

    for attempt in range(max_iterations):
        low = base_value * low_multiplier
        high = base_value * high_multiplier
        profit_low = profit_at_param(low)
        profit_high = profit_at_param(high)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ª–µ–∂–∏—Ç –ª–∏ BEP –º–µ–∂–¥—É low –∏ high
        if (profit_low > 0 and profit_high > 0) or (profit_low < 0 and profit_high < 0):
            # –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            low_multiplier -= multiplier_step
            high_multiplier += multiplier_step
            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        else:
            # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            for _ in range(100):
                mid = (low + high) / 2
                profit_mid = profit_at_param(mid)
                if profit_mid == 0 or (high - low) < 0.01:
                    return mid
                if (profit_low < 0 and profit_mid > 0) or (profit_low > 0 and profit_mid < 0):
                    high = mid
                    profit_high = profit_mid
                else:
                    low = mid
                    profit_low = profit_mid
            return (low + high) / 2
    return None  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ BEP –Ω–µ –Ω–∞–π–¥–µ–Ω

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è BEP —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
def display_bep(bep_result, param_name, param_values, profits):
    if bep_result is None:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name}. –í–æ–∑–º–æ–∂–Ω–æ, BEP –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
    else:
        st.success(f"–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è {param_name}: **{bep_result:.2f}**")
        st.markdown("""
            –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–∏–±—ã–ª—å = 0.  
            –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤—ã—à–µ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å,  
            –∞ –Ω–∏–∂–µ ‚Äî —É–±—ã—Ç–æ–∫.
        """)

        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        df_bep = pd.DataFrame({
            "–ü–∞—Ä–∞–º–µ—Ç—Ä": param_values,
            "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": profits
        })

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏
        fig = px.line(
            df_bep, 
            x="–ü–∞—Ä–∞–º–µ—Ç—Ä", 
            y="–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)",
            title=f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –æ—Ç {param_name}",
            labels={"–ü–∞—Ä–∞–º–µ—Ç—Ä": param_name, "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±./–º–µ—Å.)"},
            template="plotly_white"
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –¥–ª—è BEP
        fig.add_vline(
            x=bep_result, 
            line_dash="dash", 
            line_color="red",
            annotation=dict(
                text="BEP",
                x=bep_result,
                y=0,
                showarrow=True,
                arrowhead=1,
                ax=0,
                ay=-40,
                font=dict(color="red", size=12)
            )
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ —Ç–æ—á–∫–µ BEP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º go.Scatter
        fig.add_trace(
            go.Scatter(
                x=[bep_result],
                y=[0],
                mode='markers',
                name='BEP',
                marker=dict(color='red', size=10)
            )
        )

        st.plotly_chart(fig, use_container_width=True)
        st.info("–ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è –∏ —Ç–æ—á–∫–∞ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏
def project_financials(params: dict) -> pd.DataFrame:
    """–ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞."""
    months = params["time_horizon"]
    projections = {
        "–ú–µ—Å—è—Ü": [],
        "–î–æ—Ö–æ–¥—ã (—Ä—É–±.)": [],
        "–†–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)": [],
        "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": []
    }
    cumulative_profit = 0.0
    current_rental_cost_per_m2 = params["rental_cost_per_m2"]

    for month in range(1, months + 1):
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∞—Ä–µ–Ω–¥—ã
        if month > 1:
            current_rental_cost_per_m2 *= (1 + params["monthly_rent_growth"])

        # –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        financials = calculate_financials(
            storage_area=params["storage_area"],
            loan_area=params["loan_area"],
            vip_area=params["vip_area"],
            short_term_area=params["short_term_area"],
            storage_items_density=params["storage_items_density"],
            loan_items_density=params["loan_items_density"],
            vip_items_density=params["vip_items_density"],
            short_term_items_density=params["short_term_items_density"],
            storage_fee=params["storage_fee"],
            item_evaluation=params["item_evaluation"],
            item_realization_markup=params["item_realization_markup"],
            average_item_value=params["average_item_value"],
            loan_interest_rate=params["loan_interest_rate"],
            realization_share_storage=params["realization_share_storage"],
            realization_share_loan=params["realization_share_loan"],
            realization_share_vip=params["realization_share_vip"],
            realization_share_short_term=params["realization_share_short_term"],
            rental_cost_per_m2=current_rental_cost_per_m2,
            total_area=params["total_area"],
            salary_expense=params["salary_expense"],
            miscellaneous_expenses=params["miscellaneous_expenses"],
            depreciation_expense=params["depreciation_expense"],
            default_probability=params["default_probability"],  # –ü–µ—Ä–µ–¥–∞—ë–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞
            vip_extra_fee=params["vip_extra_fee"],
            short_term_daily_rate=params["short_term_daily_rate"]
        )

        profit = financials["profit"]
        cumulative_profit += profit

        projections["–ú–µ—Å—è—Ü"].append(month)
        projections["–î–æ—Ö–æ–¥—ã (—Ä—É–±.)"].append(financials["total_income"])
        projections["–†–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)"].append(financials["total_expenses"])
        projections["–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)"].append(cumulative_profit)
    
    df_projections = pd.DataFrame(projections)
    return df_projections

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
def save_scenario(params: dict):
    json_data = json.dumps(params, ensure_ascii=False, indent=4)
    st.download_button(
        label="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π",
        data=json_data,
        file_name="scenario.json",
        mime="application/json"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
def load_scenario():
    uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", type=["json"])
    if uploaded_file is not None:
        try:
            data = json.load(uploaded_file)
            st.success("–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return data
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
def display_metrics(metrics: dict, col):
    for key, value in metrics.items():
        if key == "üí∞ –ü—Ä–∏–±—ã–ª—å (—Ä—É–±./–º–µ—Å.)":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            try:
                profit_value = float(value.replace(',', '').replace(' ', ''))
                profit_color = "green" if profit_value >= 0 else "red"
            except ValueError:
                profit_color = "black"
            col.markdown(f"**{key}:** <span style='color:{profit_color};font-size:1.2em'>{value}</span>", unsafe_allow_html=True)
        else:
            col.metric(key, value)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è
def normalize_shares(share_key: str, new_value: float):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–æ–ª–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ 1.0.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ 0.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–µ–π (–∫–ª—é—á–∏, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
    active_keys = [k for k in st.session_state.shares.keys() if k != share_key]
    # –°—É–º–º–∞ –¥–æ–ª–µ–π –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
    total_other = sum([st.session_state.shares[k] for k in active_keys])
    # –ù–æ–≤–∞—è —Å—É–º–º–∞ –¥–æ–ª–µ–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–æ–ª–∏
    remaining = 1.0 - new_value
    if remaining < 0:
        remaining = 0.0
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–∏, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    if total_other > 0:
        for k in active_keys:
            st.session_state.shares[k] = (st.session_state.shares[k] / total_other) * remaining
    else:
        for k in active_keys:
            st.session_state.shares[k] = 0.0
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–æ–ª—é
    st.session_state.shares[share_key] = new_value

# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.markdown("# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å–∫–ª–∞–¥–∞ üì¶")

st.markdown("""
**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞.
2. –í —Ä–∞–∑–¥–µ–ª–µ **"üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è"** –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è.
3. –ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è = –¥–Ω–µ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ √ó –ø–ª–æ—â–∞–¥—å √ó 30.
4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É **"üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"**, —á—Ç–æ–±—ã **–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏**.
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É **"üîç –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏"** –¥–ª—è **–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—á–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏** –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
6. –í —Ä–∞–∑–¥–µ–ª–µ **"üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"** –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ **–¥–∏–Ω–∞–º–∏–∫–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π** –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç.
7. **–°–∫–∞—á–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
8. **–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏** –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
    
**–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (BEP)** ‚Äî —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (—Ç–∞—Ä–∏—Ñ, —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–∞—Ü–µ–Ω–∫–∞), –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏–±—ã–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 0. 
–í—ã—à–µ —ç—Ç–æ–π —Ç–æ—á–∫–∏ ‚Äî –ø—Ä–∏–±—ã–ª—å, –Ω–∏–∂–µ ‚Äî —É–±—ã—Ç–æ–∫.
""")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
with st.sidebar:
    st.markdown("## –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–ª–∞–¥–∞
    with st.sidebar.expander("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–ª–∞–¥–∞", expanded=True):
        total_area = st.number_input(
            "üìè –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å–∫–ª–∞–¥–∞ (–º¬≤)",
            value=250,
            step=10,
            help="–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö. –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è."
        )
        rental_cost_per_m2 = st.number_input(
            "üí∞ –ê—Ä–µ–Ω–¥–∞ –∑–∞ 1 –º¬≤ (—Ä—É–±./–º–µ—Å.)",
            value=1000,
            step=50,
            help="–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä."
        )
        useful_area_ratio = st.slider(
            "üìê –î–æ–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ (%)",
            40,
            80,
            50,
            5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ —Å–∫–ª–∞–¥–∞."
        ) / 100.0

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
    with st.sidebar.expander("üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è"):
        storage_fee = st.number_input(
            "üí≥ –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä—É–±./–º¬≤/–º–µ—Å.)",
            value=1500,
            step=100,
            help="–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ –≤ –º–µ—Å—è—Ü."
        )
        shelves_per_m2 = st.number_input(
            "üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫ –Ω–∞ 1 –º¬≤",
            value=3,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫ –Ω–∞ –æ–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏."
        )

        no_storage_for_storage = st.checkbox(
            "üö´ –ù–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
            value=False,
            help="–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–∫–ª–∞–¥."
        )
        no_storage_for_loan = st.checkbox(
            "üö´ –ù–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∑–∞–π–º–∞–º–∏",
            value=False,
            help="–û—Ç–∫–ª—é—á–∏—Ç—å —Å–∫–ª–∞–¥ —Å –∑–∞–π–º–∞–º–∏."
        )
        no_storage_for_vip = st.checkbox(
            "üö´ –ù–µ—Ç VIP-—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            value=False,
            help="–û—Ç–∫–ª—é—á–∏—Ç—å VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ."
        )
        no_storage_for_short_term = st.checkbox(
            "üö´ –ù–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
            value=False,
            help="–û—Ç–∫–ª—é—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ."
        )

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ª–µ–π –≤ 0 –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        if no_storage_for_storage:
            st.session_state.shares['storage_share'] = 0.0
        if no_storage_for_loan:
            st.session_state.shares['loan_share'] = 0.0
        if no_storage_for_vip:
            st.session_state.shares['vip_share'] = 0.0
        if no_storage_for_short_term:
            st.session_state.shares['short_term_share'] = 0.0

        st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ (%)")
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª—è–º–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ session_state
        storage_options = []
        if not no_storage_for_storage:
            storage_options.append("storage_share")
        if not no_storage_for_loan:
            storage_options.append("loan_share")
        if not no_storage_for_vip:
            storage_options.append("vip_share")
        if not no_storage_for_short_term:
            storage_options.append("short_term_share")

        total_storages = len(storage_options)
        if total_storages == 0:
            st.warning("üö´ –í—Å–µ —Ç–∏–ø—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
            remaining_share = 1.0
        else:
            for share_key in storage_options:
                storage_type = storage_type_mapping.get(share_key, share_key.replace('_', ' ').capitalize())
                current_share = st.session_state.shares.get(share_key, 0.0) * 100
                new_share = st.slider(
                    f"{storage_type} (%)",
                    min_value=0.0,
                    max_value=100.0,
                    value=current_share,
                    step=1.0,
                    key=share_key,
                    help=f"–î–æ–ª—è –ø–ª–æ—â–∞–¥–∏, –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥ {storage_type.lower()}."
                )
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è
                normalize_shares(share_key, new_share / 100.0)
                # –†–∞—Å—á—ë—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∏
                allocated_area = total_area * useful_area_ratio * 2 * shelves_per_m2 * st.session_state.shares[share_key]
                st.markdown(f"**{storage_type}:** {st.session_state.shares[share_key] * 100:.1f}% ({allocated_area:.2f} –º¬≤)")

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–π—Å—è –¥–æ–ª–∏ –ø–ª–æ—â–∞–¥–∏
            remaining_share = 1.0 - sum(st.session_state.shares.values())
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ remaining_share –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω
            remaining_share = max(min(remaining_share, 1.0), 0.0)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–π—Å—è –ø–ª–æ—â–∞–¥–∏ –≤ –º¬≤
        remaining_area = total_area * useful_area_ratio * 2 * shelves_per_m2 * remaining_share

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–µ—Ç–∫–æ–π
        progress_bar = st.progress(remaining_share)
        st.markdown(f"**–û—Å—Ç–∞–≤—à–∞—è—Å—è –ø–ª–æ—â–∞–¥—å:** {remaining_share * 100:.2f}% ({remaining_area:.2f} –º¬≤)")

        st.markdown("### üïí –¢–∞—Ä–∏—Ñ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä—É–±./–¥–µ–Ω—å/–º¬≤)")
        short_term_rate_choice = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
            ["50 —Ä—É–±./–¥–µ–Ω—å/–º¬≤", "60 —Ä—É–±./–¥–µ–Ω—å/–º¬≤", "100 —Ä—É–±./–¥–µ–Ω—å/–º¬≤", "–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π."
        )
        if short_term_rate_choice == "–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)":
            short_term_daily_rate = st.number_input(
                "–í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ (—Ä—É–±./–¥–µ–Ω—å/–º¬≤)",
                value=60.0,
                step=5.0,
                help="–í—Ä—É—á–Ω—É—é –≤–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."
            )
        else:
            short_term_daily_rate = float(short_term_rate_choice.split()[0])

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ü–µ–Ω–æ–∫ –∏ –∑–∞–π–º–æ–≤
    with st.sidebar.expander("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ü–µ–Ω–æ–∫ –∏ –∑–∞–π–º–æ–≤"):
        item_evaluation = st.slider(
            "üîç –û—Ü–µ–Ω–∫–∞ –≤–µ—â–∏ (%)",
            0,
            100,
            80,
            5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ –≤–µ—â–∏."
        ) / 100.0
        item_realization_markup = st.number_input(
            "üìà –ù–∞—Ü–µ–Ω–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (%)",
            value=20,
            step=5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤."
        )
        average_item_value = st.number_input(
            "üí≤ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ (—Ä—É–±./–º¬≤)",
            value=10000,
            step=500,
            help="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä."
        )
        loan_interest_rate = st.number_input(
            "üí≥ –°—Ç–∞–≤–∫–∞ –∑–∞–π–º–æ–≤ –≤ –¥–µ–Ω—å (%)",
            value=0.317,
            step=0.01,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –∑–∞–π–º–∞–º –≤ –¥–µ–Ω—å."
        )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    with st.sidebar.expander("üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"):
        storage_items_density = st.number_input(
            "üì¶ –ü—Ä–æ—Å—Ç–æ–µ (–≤–µ—â–µ–π/–º¬≤)",
            value=5,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –Ω–∞ –æ–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞."
        )
        loan_items_density = st.number_input(
            "üí≥ –ó–∞–π–º—ã (–≤–µ—â–µ–π/–º¬≤)",
            value=5,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –Ω–∞ –æ–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä —Å–∫–ª–∞–¥–∞ —Å –∑–∞–π–º–∞–º–∏."
        )
        vip_items_density = st.number_input(
            "üëë VIP (–≤–µ—â–µ–π/–º¬≤)",
            value=2,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –Ω–∞ –æ–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä VIP-—Ö—Ä–∞–Ω–µ–Ω–∏—è."
        )
        short_term_items_density = st.number_input(
            "‚è≥ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (–≤–µ—â–µ–π/–º¬≤)",
            value=4,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –Ω–∞ –æ–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."
        )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    with st.sidebar.expander("üìà –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"):
        realization_share_storage = st.slider(
            "üì¶ –ü—Ä–æ—Å—Ç–æ–µ (%)",
            0,
            100,
            50,
            5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."
        ) / 100.0
        realization_share_loan = st.slider(
            "üí≥ –ó–∞–π–º—ã (%)",
            0,
            100,
            50,
            5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∑–∞–π–º–∞–º–∏."
        ) / 100.0
        realization_share_vip = st.slider(
            "üëë VIP (%)",
            0,
            100,
            50,
            5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ VIP-—Ö—Ä–∞–Ω–µ–Ω–∏—è."
        ) / 100.0
        realization_share_short_term = st.slider(
            "‚è≥ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (%)",
            0,
            100,
            50,
            5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."
        ) / 100.0

    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    with st.sidebar.expander("üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        salary_expense = st.number_input(
            "üíº –ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±./–º–µ—Å.)",
            value=240000,
            step=10000,
            help="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É."
        )
        miscellaneous_expenses = st.number_input(
            "üßæ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±./–º–µ—Å.)",
            value=50000,
            step=5000,
            help="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã."
        )
        depreciation_expense = st.number_input(
            "üìâ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è (—Ä—É–±./–º–µ—Å.)",
            value=20000,
            step=5000,
            help="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—é."
        )

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    disable_extended = st.sidebar.checkbox(
        "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
        value=False,
        help="–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Ä–∏—Å–∫–∞."
    )

    if not disable_extended:
        with st.sidebar.expander("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∏ —Ä–∏—Å–∫)"):
            time_horizon = st.slider(
                "üïí –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å.)",
                1,
                24,
                6,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π."
            )
            monthly_rent_growth = st.number_input(
                "üìà –ú–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç –∞—Ä–µ–Ω–¥—ã (%)",
                value=1.0,
                step=0.5,
                help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–æ—Å—Ç –∞—Ä–µ–Ω–¥—ã –≤ –º–µ—Å—è—Ü."
            ) / 100.0
            default_probability = st.number_input(
                "‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ (%)",
                value=5.0,
                step=1.0,
                help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–π–º–æ–≤."
            ) / 100.0
            liquidity_factor = st.number_input(
                "üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å",
                value=1.0,
                step=0.1,
                help="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏."
            )
            safety_factor = st.number_input(
                "üõ°Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞",
                value=1.2,
                step=0.1,
                help="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–π–º–∞."
            )
    else:
        time_horizon = 1
        monthly_rent_growth = 0.0
        default_probability = 0.0
        liquidity_factor = 1.0
        safety_factor = 1.0

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
params = {
    "total_area": total_area,
    "rental_cost_per_m2": rental_cost_per_m2,
    "useful_area_ratio": useful_area_ratio,
    "storage_share": st.session_state.shares.get('storage_share', 0.0),
    "loan_share": st.session_state.shares.get('loan_share', 0.0),
    "vip_share": st.session_state.shares.get('vip_share', 0.0),
    "short_term_share": st.session_state.shares.get('short_term_share', 0.0),
    "storage_fee": storage_fee,
    "shelves_per_m2": shelves_per_m2,
    "short_term_daily_rate": short_term_daily_rate,
    "item_evaluation": item_evaluation,
    "item_realization_markup": item_realization_markup,
    "average_item_value": average_item_value,
    "loan_interest_rate": loan_interest_rate,
    "realization_share_storage": realization_share_storage,
    "realization_share_loan": realization_share_loan,
    "realization_share_vip": realization_share_vip,
    "realization_share_short_term": realization_share_short_term,
    "salary_expense": salary_expense,
    "miscellaneous_expenses": miscellaneous_expenses,
    "depreciation_expense": depreciation_expense,
    "time_horizon": time_horizon,
    "monthly_rent_growth": monthly_rent_growth,
    "default_probability": default_probability,
    "liquidity_factor": liquidity_factor,
    "safety_factor": safety_factor,
    "storage_items_density": storage_items_density,
    "loan_items_density": loan_items_density,
    "vip_items_density": vip_items_density,
    "short_term_items_density": short_term_items_density,
    "vip_extra_fee": 1000.0  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
}

# –†–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–µ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ params
areas = calculate_areas(
    total_area=params["total_area"],
    useful_area_ratio=params["useful_area_ratio"],
    shelves_per_m2=params["shelves_per_m2"],
    storage_share=params["storage_share"],
    loan_share=params["loan_share"],
    vip_share=params["vip_share"],
    short_term_share=params["short_term_share"]
)
params.update(areas)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–ª–æ—â–∞–¥–∏ –≤ params

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
inputs_valid = validate_inputs(params)

if inputs_valid:
    # –†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—â–µ–π
    items = calculate_items(
        storage_area=params["storage_area"],
        loan_area=params["loan_area"],
        vip_area=params["vip_area"],
        short_term_area=params["short_term_area"],
        storage_items_density=params["storage_items_density"],
        loan_items_density=params["loan_items_density"],
        vip_items_density=params["vip_items_density"],
        short_term_items_density=params["short_term_items_density"]
    )

    # –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    base_financials = calculate_financials(
        storage_area=params["storage_area"],
        loan_area=params["loan_area"],
        vip_area=params["vip_area"],
        short_term_area=params["short_term_area"],
        storage_items_density=params["storage_items_density"],
        loan_items_density=params["loan_items_density"],
        vip_items_density=params["vip_items_density"],
        short_term_items_density=params["short_term_items_density"],
        storage_fee=params["storage_fee"],
        item_evaluation=params["item_evaluation"],
        item_realization_markup=params["item_realization_markup"],
        average_item_value=params["average_item_value"],
        loan_interest_rate=params["loan_interest_rate"],
        realization_share_storage=params["realization_share_storage"],
        realization_share_loan=params["realization_share_loan"],
        realization_share_vip=params["realization_share_vip"],
        realization_share_short_term=params["realization_share_short_term"],
        rental_cost_per_m2=params["rental_cost_per_m2"],
        total_area=params["total_area"],
        salary_expense=params["salary_expense"],
        miscellaneous_expenses=params["miscellaneous_expenses"],
        depreciation_expense=params["depreciation_expense"],
        default_probability=params["default_probability"],  # –ü–µ—Ä–µ–¥–∞—ë–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞
        vip_extra_fee=params["vip_extra_fee"],
        short_term_daily_rate=params["short_term_daily_rate"]
    )

    # –†–∞—Å—á—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    profit_margin, profitability = calculate_additional_metrics(
        total_income=base_financials["total_income"],
        total_expenses=base_financials["total_expenses"],
        profit=base_financials["profit"]
    )

    # –†–∞—Å—á—ë—Ç –º–∏–Ω. —Å—É–º–º—ã –∑–∞–π–º–∞
    if not disable_extended and params["loan_interest_rate"] > 0:
        average_growth_factor = 1 + params["monthly_rent_growth"] * (params["time_horizon"] / 2)
        adjusted_daily_storage_fee = base_financials["daily_storage_fee"] * average_growth_factor
        min_loan_amount = params["safety_factor"] * (adjusted_daily_storage_fee / ((params["loan_interest_rate"]/100)*(1 - params["default_probability"])*params["liquidity_factor"]))
        loan_label = "–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–π–º–∞ (—É—á—ë—Ç —Ä–∏—Å–∫–æ–≤ –∏ –¥–∏–Ω–∞–º–∏–∫–∏) (—Ä—É–±.)"
    else:
        if params["loan_interest_rate"] > 0:
            min_loan_amount = base_financials["daily_storage_fee"] / (params["loan_interest_rate"] / 100)
        else:
            min_loan_amount = 0.0
        loan_label = "–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–π–º–∞ (–±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç) (—Ä—É–±.)"

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "üîç –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏", "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"])

    with tab1:
        st.header("üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        col1, col2 = st.columns([2, 3])

        with col1:
            st.subheader("üîë –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            metrics = {
                "üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±./–º–µ—Å.)": f"{base_financials['total_income']:,.2f}",
                "üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±./–º–µ—Å.)": f"{base_financials['total_expenses']:,.2f}",
                "üí∞ –ü—Ä–∏–±—ã–ª—å (—Ä—É–±./–º–µ—Å.)": f"{base_financials['profit']:,.2f}",
                "üí≥ " + loan_label: f"{min_loan_amount:,.2f}",
                "üõçÔ∏è –î–æ—Ö–æ–¥ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ä—É–±.)": f"{base_financials['realization_income']:,.2f}",
                "üìä –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (%)": f"{profit_margin:,.2f}%",
                "üîç –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)": f"{profitability:,.2f}%"
            }
            display_metrics(metrics, col1)

        with col2:
            st.subheader("üìà –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤ (–∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)")
            labels = [
                "–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ",
                "–ó–∞–π–º—ã (–ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)",
                "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö",
                "VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
                "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ"
            ]
            values = [
                base_financials["storage_income"],
                base_financials["loan_income_after_realization"],
                base_financials["realization_income"],
                base_financials["vip_income"],
                base_financials["short_term_income"]
            ]
            values = [max(v, 0) for v in values]
            if sum(values) <= 0:
                labels = ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]
                values = [0]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Plotly –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
            fig = px.pie(names=labels, values=values, title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤")
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –¥–ª—è BEP
        st.subheader("üìà –ë–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å (BEP) –≤ –¥–µ–Ω–µ–∂–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")
        st.metric("üí∏ –í—ã—Ä—É—á–∫–∞ –¥–ª—è BEP (—Ä—É–±./–º–µ—Å.)", f"{base_financials['total_expenses']:,.2f}")
        st.markdown("""
            –ü—Ä–∏ —ç—Ç–æ–π –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –≤—ã—Ä—É—á–∫–µ –¥–æ—Ö–æ–¥—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞—é—Ç —Ä–∞—Å—Ö–æ–¥—ã.  
            –í—ã—à–µ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ ‚Äî –≤—ã –≤ –ø—Ä–∏–±—ã–ª–∏, –Ω–∏–∂–µ ‚Äî –≤ —É–±—ã—Ç–∫–µ.
        """)

    with tab2:
        st.header("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if params["time_horizon"] > 1:
            df_projections = project_financials(params)
            st.subheader("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
            st.dataframe(df_projections.style.format({"–î–æ—Ö–æ–¥—ã (—Ä—É–±.)": "{:,.2f}", "–†–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)": "{:,.2f}", "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": "{:,.2f}"}))
            
            st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            df_long = df_projections.melt(id_vars="–ú–µ—Å—è—Ü", value_vars=["–î–æ—Ö–æ–¥—ã (—Ä—É–±.)", "–†–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)", "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)"],
                                          var_name="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", value_name="–ó–Ω–∞—á–µ–Ω–∏–µ")

            fig = px.line(df_long, x="–ú–µ—Å—è—Ü", y="–ó–Ω–∞—á–µ–Ω–∏–µ", color="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å",
                          title="–î–∏–Ω–∞–º–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π",
                          labels={"–ó–Ω–∞—á–µ–Ω–∏–µ": "–°—É–º–º–∞ (—Ä—É–±.)"})
            fig.update_traces(mode='lines+markers')
            st.plotly_chart(fig, use_container_width=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –°—Ç–æ–ª–±—á–∞—Ç—É—é –î–∏–∞–≥—Ä–∞–º–º—É
            st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –î–æ—Ö–æ–¥–æ–≤, –†–∞—Å—Ö–æ–¥–æ–≤ –∏ –ü—Ä–∏–±—ã–ª–∏ –ø–æ –ú–µ—Å—è—Ü–∞–º")
            fig_bar = px.bar(df_projections, x="–ú–µ—Å—è—Ü", y=["–î–æ—Ö–æ–¥—ã (—Ä—É–±.)", "–†–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)", "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)"],
                             title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –î–æ—Ö–æ–¥–æ–≤, –†–∞—Å—Ö–æ–¥–æ–≤ –∏ –ü—Ä–∏–±—ã–ª–∏ –ø–æ –ú–µ—Å—è—Ü–∞–º",
                             labels={"value": "–°—É–º–º–∞ (—Ä—É–±.)", "–ú–µ—Å—è—Ü": "–ú–µ—Å—è—Ü"},
                             barmode='group')
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.info("–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –±–æ–ª–µ–µ 1 –º–µ—Å—è—Ü–∞.")

    with tab3:
        st.header("üîç –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (BEP)")
        st.subheader("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BEP –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
        
        storage_type = st.selectbox(
            "üîç –í–∏–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
            ["–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–•—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–π–º–∞–º–∏", "VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ BEP."
        )

        parameter_options = {}
        base_param_value = 0.0

        if storage_type == "–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ":
            parameter_options = {"–¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä—É–±./–º¬≤/–º–µ—Å.)": "storage_fee"}
            base_param_value = params["storage_fee"]
        elif storage_type == "–•—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–π–º–∞–º–∏":
            parameter_options = {"–°—Ç–∞–≤–∫–∞ –ø–æ –∑–∞–π–º–∞–º (%)": "loan_interest_rate"}
            base_param_value = params["loan_interest_rate"]
        elif storage_type == "VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ":
            parameter_options = {"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ VIP (—Ä—É–±.)": "vip_extra_fee"}
            base_param_value = params["vip_extra_fee"]
        else:
            parameter_options = {"–¢–∞—Ä–∏—Ñ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä—É–±./–¥–µ–Ω—å/–º¬≤)": "short_term_daily_rate"}
            base_param_value = params["short_term_daily_rate"]

        parameter_choice = st.selectbox(
            "üìä –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è BEP",
            list(parameter_options.keys()),
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å BEP."
        )
        param_key = parameter_options[parameter_choice]

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
        financials_required_keys = [
            "storage_area",
            "loan_area",
            "vip_area",
            "short_term_area",
            "storage_items_density",
            "loan_items_density",
            "vip_items_density",
            "short_term_items_density",
            "storage_fee",
            "item_evaluation",
            "item_realization_markup",
            "average_item_value",
            "loan_interest_rate",
            "realization_share_storage",
            "realization_share_loan",
            "realization_share_vip",
            "realization_share_short_term",
            "rental_cost_per_m2",
            "total_area",
            "salary_expense",
            "miscellaneous_expenses",
            "depreciation_expense",
            "default_probability",
            "vip_extra_fee",
            "short_term_daily_rate"
        ]

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        relevant_params = {k: v for k, v in params.items() if k in financials_required_keys}

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç BEP –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        bep_result = calculate_bep(param_key, base_param_value, calculate_financials, **relevant_params)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        if param_key == "storage_fee":
            param_values = np.linspace(params["storage_fee"] * 0.5, params["storage_fee"] * 1.5, 100)
        elif param_key == "loan_interest_rate":
            param_values = np.linspace(params["loan_interest_rate"] * 0.5, params["loan_interest_rate"] * 1.5, 100)
        elif param_key == "vip_extra_fee":
            param_values = np.linspace(500, 1500, 100)
        else:  # short_term_daily_rate
            param_values = np.linspace(params["short_term_daily_rate"] * 0.5, params["short_term_daily_rate"] * 1.5, 100)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        try:
            profits = [
                calculate_financials(**{**relevant_params, param_key: val})["profit"]
                for val in param_values
            ]
        except KeyError as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø—Ä–∏–±—ã–ª–∏: {e}")
            profits = []

        # –ï—Å–ª–∏ BEP –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
        if bep_result is None:
            st.warning("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç BEP. –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞.")
            # –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ 50%
            param_values_extended = np.linspace(params[param_key] * 0.3, params[param_key] * 1.7, 200)
            try:
                profits_extended = [
                    calculate_financials(**{**relevant_params, param_key: val})["profit"]
                    for val in param_values_extended
                ]
                # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º BEP —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
                bep_result_extended = calculate_bep(param_key, base_param_value, calculate_financials, **relevant_params)
                if bep_result_extended is not None:
                    st.success(f"–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: **{bep_result_extended:.2f}**")
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
                    display_bep(bep_result_extended, parameter_choice, param_values_extended, profits_extended)
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–∂–µ –ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
            except KeyError as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø—Ä–∏–±—ã–ª–∏ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {e}")
        else:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ BEP —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
            display_bep(bep_result, parameter_choice, param_values, profits)

    with tab4:
        st.header("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
        st.subheader("üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π")
        st.write(f"**–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ:** {int(items['stored_items']):,}")
        st.write(f"**–•—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–π–º–∞–º–∏:** {int(items['total_items_loan']):,}")
        st.write(f"**VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ:** {int(items['vip_stored_items']):,}")
        st.write(f"**–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ:** {int(items['short_term_stored_items']):,}")

        st.subheader("üìê –ü–ª–æ—â–∞–¥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–º¬≤)")
        storage_data = {
            "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è": ["–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–•—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–π–º–∞–º–∏", "VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ"],
            "–ü–ª–æ—â–∞–¥—å (–º¬≤)": [
                params["storage_area"],
                params["loan_area"],
                params["vip_area"],
                params["short_term_area"]
            ],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π": [
                items["stored_items"],
                items["total_items_loan"],
                items["vip_stored_items"],
                items["short_term_stored_items"]
            ],
        }
        df_storage = pd.DataFrame(storage_data)
        st.dataframe(df_storage.style.format({"–ü–ª–æ—â–∞–¥—å (–º¬≤)": "{:,.2f}", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π": "{:,.0f}"}))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ü—Ä–∏–±—ã–ª–∏
        st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü—Ä–∏–±—ã–ª–∏ –ø–æ –¢–∏–ø–∞–º –•—Ä–∞–Ω–µ–Ω–∏—è")
        profit_data = {
            "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è": ["–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–•—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–π–º–∞–º–∏", "VIP-—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ"],
            "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": [
                base_financials["storage_income"] - (params["storage_area"] * params["rental_cost_per_m2"]),
                base_financials["loan_income_after_realization"] - (params["loan_area"] * params["rental_cost_per_m2"]),
                base_financials["vip_income"] - (params["vip_area"] * params["rental_cost_per_m2"]),
                base_financials["short_term_income"] - (params["short_term_area"] * params["rental_cost_per_m2"])
            ]
        }
        df_profit = pd.DataFrame(profit_data)
        fig_hist = px.bar(df_profit, x="–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è", y="–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)",
                          title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü—Ä–∏–±—ã–ª–∏ –ø–æ –¢–∏–ø–∞–º –•—Ä–∞–Ω–µ–Ω–∏—è",
                          labels={"–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)", "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è": "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è"},
                          text_auto=True)
        st.plotly_chart(fig_hist, use_container_width=True)

        st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        df_results = pd.DataFrame({
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                "–û–±—â–∏–π –¥–æ—Ö–æ–¥",
                "–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
                "–ü—Ä–∏–±—ã–ª—å",
                "–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (%)",
                "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)",
                "–î–æ—Ö–æ–¥ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
                ("–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–π–º–∞ (—É—á—ë—Ç —Ä–∏—Å–∫–æ–≤ –∏ –¥–∏–Ω–∞–º–∏–∫–∏) (—Ä—É–±.)" if not disable_extended and params["loan_interest_rate"] > 0 else "–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–π–º–∞ (–±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç) (—Ä—É–±.)")
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                base_financials["total_income"],
                base_financials["total_expenses"],
                base_financials["profit"],
                profit_margin,
                profitability,
                base_financials["realization_income"],
                min_loan_amount
            ]
        })
        generate_download_link(df_results)

        if base_financials["loan_interest_rate"] == 0:
            st.warning("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å—Ç–∞–≤–∫–∞ –ø–æ –∑–∞–π–º–∞–º —Ä–∞–≤–Ω–∞ 0. –î–æ—Ö–æ–¥ –æ—Ç –∑–∞–π–º–æ–≤ –±—É–¥–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è params
with st.sidebar.expander("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"):
    save_scenario(params)
    loaded_params = load_scenario()
    if loaded_params:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        params_keys = params.keys()
        for key in loaded_params.keys():
            if key in params_keys:
                params[key] = loaded_params[key]
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        st.session_state.shares['storage_share'] = loaded_params.get('storage_share', 0.0)
        st.session_state.shares['loan_share'] = loaded_params.get('loan_share', 0.0)
        st.session_state.shares['vip_share'] = loaded_params.get('vip_share', 0.0)
        st.session_state.shares['short_term_share'] = loaded_params.get('short_term_share', 0.0)
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—â–∞–¥–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
        areas = calculate_areas(
            total_area=params["total_area"],
            useful_area_ratio=params["useful_area_ratio"],
            shelves_per_m2=params["shelves_per_m2"],
            storage_share=params["storage_share"],
            loan_share=params["loan_share"],
            vip_share=params["vip_share"],
            short_term_share=params["short_term_share"]
        )
        params.update(areas)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        # st.experimental_rerun()  # –£–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.info("""
### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
1. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞.
2. –í —Ä–∞–∑–¥–µ–ª–µ **"üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è"** –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è.
3. –ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è = –¥–Ω–µ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ √ó –ø–ª–æ—â–∞–¥—å √ó 30.
4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É **"üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"**, —á—Ç–æ–±—ã **–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏**.
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É **"üîç –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏"** –¥–ª—è **–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—á–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏** –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
6. –í —Ä–∞–∑–¥–µ–ª–µ **"üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"** –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ **–¥–∏–Ω–∞–º–∏–∫–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π** –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç.
7. **–°–∫–∞—á–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
8. **–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏** –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
""")